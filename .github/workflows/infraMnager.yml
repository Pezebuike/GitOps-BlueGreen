name: Infrastructure Management Router
on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Action to perform'
        required: true
        options:
          - apply
          - destroy
      module:
        type: choice
        description: 'Module to manage'
        required: true
        options:
          - alb
          - eks
          - ec2
          - security_group
          - vpc
      resource_name:
        type: string
        description: 'Name of the resource'
        required: False
        default: ''
      run_post_deploy:
        type: choice
        description: 'Run post-deployment script (for EKS only)'
        required: true
        options:
          - 'false'
          - 'true'
        default: 'false'
      run_ingress_test:
        type: choice
        description: 'Run ingress testing script (for EKS only)'
        required: true
        options:
          - 'false'
          - 'true'
        default: 'false'

permissions:
  contents: read
  id-token: write
   
env:
  TF_PLAN_FILE: ${{ github.sha }}.tfplan
  aws_region: ${{ secrets.AWS_REGION }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  manage-infrastructure:
    name: "${{ github.event.inputs.action }} ${{ github.event.inputs.module }}"
    runs-on: ubuntu-latest
    steps:
      # Common steps
      - name: Checkout Code
        uses: actions/checkout@v4
     
      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7
     
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.aws_region }}
          aws-access-key-id: ${{ env.aws_access_key_id }}
          aws-secret-access-key: ${{ env.aws_secret_access_key }}
         
      # Apply-specific steps
      - name: Create Backend Config
        run: |
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "$BUCKET_TF_STATE"
              key            = "${{ github.event.inputs.module }}/${{ github.event.inputs.resource_name }}.tfstate"
              region         = "$aws_region"
             
            }
          }
          EOF
        working-directory: modules/${{ github.event.inputs.module }}
     
      - name: Terraform Init
        run: terraform init
        working-directory: modules/${{ github.event.inputs.module }}
       
      # Conditional Apply steps
      - name: Terraform Plan (Apply)
        if: github.event.inputs.action == 'apply'
        run: terraform plan -out ${{ env.TF_PLAN_FILE }} -var-file="${{ github.event.inputs.module }}.tfvars"
        working-directory: modules/${{ github.event.inputs.module }}
       
      # Conditional Destroy steps  
      - name: Terraform Plan (Destroy)
        if: github.event.inputs.action == 'destroy'
        run: terraform plan -destroy -out ${{ env.TF_PLAN_FILE }} -var-file="${{ github.event.inputs.module }}.tfvars"
        working-directory: modules/${{ github.event.inputs.module }}
       
      # Apply with approval
      - name: Terraform Apply
        if: success()
        run: terraform apply -auto-approve ${{ env.TF_PLAN_FILE }}
        working-directory: modules/${{ github.event.inputs.module }}

      # Stage 1: Post-deployment installation for EKS
      - name: Run Post-Deployment Script for EKS
        if: ${{ github.event.inputs.run_post_deploy == 'true' && github.event.inputs.module == 'eks' && github.event.inputs.action == 'apply' }}
        working-directory: modules/${{ github.event.inputs.module }}
        run: |
          echo "Running post-deployment script for EKS cluster..."
          
          # Install necessary tools for the script
          sudo apt-get update -y
          sudo apt-get install -y curl jq
          
          # Copy post_deploy.sh from repo to module directory if needed
          if [ ! -f "post_deploy.sh" ]; then
            echo "Copying post_deploy.sh to module directory..."
            cp ../../post_deploy.sh ./
          fi
          
          # Make script executable
          chmod +x post_deploy.sh
          
          # Set environment variables for the script - simplified
          export EKS_CLUSTER_NAME="k8s-eks-cluster"
          export AWS_REGION=${{ env.aws_region }}
          
          # Run the post-deployment script
          ./post_deploy.sh || echo "Post-deployment script had errors but continuing"
          
          echo "Post-deployment script completed!"
          
      # Stage 2: Test ingress-nginx deployment
      - name: Test Ingress-Nginx on EKS
        if: ${{ github.event.inputs.run_ingress_test == 'true' && github.event.inputs.module == 'eks' && github.event.inputs.action == 'apply' }}
        working-directory: modules/${{ github.event.inputs.module }}
        run: |
          echo "Running ingress-nginx testing script for EKS cluster..."
          
          # Copy test_ingress.sh from repo to module directory if needed
          if [ ! -f "test_ingress.sh" ]; then
            echo "Copying test_ingress.sh to module directory..."
            cp ../../test_ingress.sh ./
          fi
          
          # Make script executable
          chmod +x test_ingress.sh
          
          # Set environment variables for the script
          export EKS_CLUSTER_NAME="k8s-eks-cluster"
          export AWS_REGION=${{ env.aws_region }}
          export CLEANUP="true"
          
          # Make sure kubectl is configured for this cluster
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION || echo "Could not update kubeconfig but continuing"
          
          # Run the testing script
          ./test_ingress.sh || echo "Test script had errors but continuing workflow"
          
          echo "Ingress-nginx testing completed!"

      # Validate EKS cluster (regardless of which scripts were run)
      - name: Validate EKS Cluster
        if: ${{ (github.event.inputs.run_post_deploy == 'true' || github.event.inputs.run_ingress_test == 'true') && github.event.inputs.module == 'eks' && github.event.inputs.action == 'apply' }}
        working-directory: modules/${{ github.event.inputs.module }}
        run: |
          echo "Validating EKS cluster deployment..."
          
          # Use fixed cluster name
          export EKS_CLUSTER_NAME="k8s-eks-cluster"
          export AWS_REGION=${{ env.aws_region }}
          
          # Ensure kubectl is configured
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION || echo "Could not update kubeconfig but continuing"
          
          # Validate cluster connection
          kubectl get nodes || echo "Could not get nodes but continuing"
          kubectl get pods -A --no-headers | wc -l || echo "Could not count pods but continuing"
          
          # If ingress-nginx was installed, show its status
          if kubectl get namespace ingress-nginx &>/dev/null; then
            echo "Ingress-Nginx Status:"
            kubectl get pods -n ingress-nginx || echo "Could not get ingress-nginx pods"
            kubectl get svc -n ingress-nginx || echo "Could not get ingress-nginx services"
            
            # Get external IP/hostname of ingress controller
            EXTERNAL_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            if [ -z "$EXTERNAL_IP" ]; then
              EXTERNAL_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
            fi
            
            if [ -n "$EXTERNAL_IP" ]; then
              echo "Ingress Controller Endpoint: $EXTERNAL_IP"
            else
              echo "Ingress Controller Endpoint not yet available"
            fi
          fi
          
          echo "EKS cluster validation completed!"

# name: Infrastructure Management Router
# on:
#   workflow_dispatch:
#     inputs:
#       action:
#         type: choice
#         description: 'Action to perform'
#         required: true
#         options:
#           - apply
#           - destroy
#       module:
#         type: choice
#         description: 'Module to manage'
#         required: true
#         options:
#           - alb
#           - eks
#           - ec2
#           - security_group
#           - vpc
#       resource_name:
#         type: string
#         description: 'Name of the resource'
#         required: False
#         default: ''
#       run_post_deploy:
#         type: choice
#         description: 'Run post-deployment script (for EKS only)'
#         required: true
#         options:
#           - 'false'
#           - 'true'
#         default: 'false'

# permissions:
#   contents: read
#   id-token: write
   
# env:
#   TF_PLAN_FILE: ${{ github.sha }}.tfplan
#   aws_region: ${{ secrets.AWS_REGION }}
#   BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
#   aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# jobs:
#   manage-infrastructure:
#     name: "${{ github.event.inputs.action }} ${{ github.event.inputs.module }}"
#     runs-on: ubuntu-latest
#     steps:
#       # Common steps
#       - name: Checkout Code
#         uses: actions/checkout@v4
     
#       - name: Set Up Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.7
     
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-region: ${{ env.aws_region }}
#           aws-access-key-id: ${{ env.aws_access_key_id }}
#           aws-secret-access-key: ${{ env.aws_secret_access_key }}
         
#       # Apply-specific steps
#       - name: Create Backend Config
#         run: |
#           cat > backend.tf << EOF
#           terraform {
#             backend "s3" {
#               bucket         = "$BUCKET_TF_STATE"
#               key            = "${{ github.event.inputs.module }}/${{ github.event.inputs.resource_name }}.tfstate"
#               region         = "$aws_region"
             
#             }
#           }
#           EOF
#         working-directory: modules/${{ github.event.inputs.module }}
     
#       - name: Terraform Init
#         run: terraform init
#         working-directory: modules/${{ github.event.inputs.module }}
       
#       # Conditional Apply steps
#       - name: Terraform Plan (Apply)
#         if: github.event.inputs.action == 'apply'
#         run: terraform plan -out ${{ env.TF_PLAN_FILE }} -var-file="${{ github.event.inputs.module }}.tfvars"
#         working-directory: modules/${{ github.event.inputs.module }}
       
#       # Conditional Destroy steps  
#       - name: Terraform Plan (Destroy)
#         if: github.event.inputs.action == 'destroy'
#         run: terraform plan -destroy -out ${{ env.TF_PLAN_FILE }} -var-file="${{ github.event.inputs.module }}.tfvars"
#         working-directory: modules/${{ github.event.inputs.module }}
       
#       # Apply with approval
#       - name: Terraform Apply
#         if: success()
#         run: terraform apply -auto-approve ${{ env.TF_PLAN_FILE }}
#         working-directory: modules/${{ github.event.inputs.module }}

#       # Post-deployment steps for EKS
#       - name: Run Post-Deployment Script for EKS
#         if: ${{ github.event.inputs.run_post_deploy == 'true' && github.event.inputs.module == 'eks' && github.event.inputs.action == 'apply' }}
#         working-directory: modules/${{ github.event.inputs.module }}
#         run: |
#           echo "Running post-deployment script for EKS cluster..."
          
#           # Install necessary tools for the script
#           sudo apt-get update -y
#           sudo apt-get install -y curl jq
          
#           # Copy post_deploy.sh from repo to module directory if needed
#           if [ ! -f "post_deploy.sh" ]; then
#             echo "Copying post_deploy.sh to module directory..."
#             cp ../../post_deploy.sh ./
#           fi
          
#           # Make script executable
#           chmod +x post_deploy.sh
          
#           # Set environment variables for the script
#           export PROJECT_NAME="${{ github.event.inputs.resource_name }}"
#           export ENVIRONMENT="$(grep -E 'environment\s*=' ${{ github.event.inputs.module }}.tfvars | sed 's/.*=\s*"\(.*\)".*/\1/')"
          
#           # Get the cluster name directly from Terraform outputs
#           export CLUSTER_NAME=$(terraform output -raw eks_cluster_name 2>/dev/null || echo "${PROJECT_NAME:-k8s}-${ENVIRONMENT:-dev}-eks-cluster")
#           export REGION=${{ env.aws_region }}
          
#           # Run the post-deployment script
#           ./post_deploy.sh
          
#           echo "Post-deployment script completed successfully!"
          
#       # Validate EKS cluster (if post-deploy was run)
#       - name: Validate EKS Cluster
#         if: ${{ github.event.inputs.run_post_deploy == 'true' && github.event.inputs.module == 'eks' && github.event.inputs.action == 'apply' }}
#         working-directory: modules/${{ github.event.inputs.module }}
#         run: |
#           echo "Validating EKS cluster deployment..."
          
#           # Validate cluster connection
#           kubectl get nodes
#           kubectl get pods -A --no-headers | wc -l
          
#           echo "EKS cluster validation completed successfully!"









# name: Infrastructure Management Router
# on:
#   workflow_dispatch:
#     inputs:
#       action:
#         type: choice
#         description: 'Action to perform'
#         required: true
#         options:
#           - apply
#           - destroy
#       module:
#         type: choice
#         description: 'Module to manage'
#         required: true
#         options:
#           - alb
#           - eks
#           - ec2
#           - security_group
#           - vpc
#       resource_name:
#         type: string
#         description: 'Name of the resource'
#         required: False
#         default: ''
#       run_post_deploy:
#         type: choice
#         description: 'Run post-deployment script (for EKS only)'
#         required: true
#         options:
#           - 'false'
#           - 'true'
#         default: 'false'
# permissions:
#   contents: read
#   id-token: write
   
# env:
#   TF_PLAN_FILE: ${{ github.sha }}.tfplan
#   aws_region: ${{ secrets.AWS_REGION }}
#   BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
#   aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# jobs:
#   manage-infrastructure:
#     name: "${{ github.event.inputs.action }} ${{ github.event.inputs.module }}"
#     runs-on: ubuntu-latest
#     steps:
#       # Common steps
#       - name: Checkout Code
#         uses: actions/checkout@v4
     
#       - name: Set Up Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.7
     
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-region: ${{ env.aws_region }}
#           aws-access-key-id: ${{ env.aws_access_key_id }}
#           aws-secret-access-key: ${{ env.aws_secret_access_key }}
         
#       # Apply-specific steps
#       - name: Create Backend Config
#         run: |
#           cat > backend.tf << EOF
#           terraform {
#             backend "s3" {
#               bucket         = "$BUCKET_TF_STATE"
#               key            = "${{ github.event.inputs.module }}/${{ github.event.inputs.resource_name }}.tfstate"
#               region         = "$aws_region"
             
#             }
#           }
#           EOF
#         working-directory: modules/${{ github.event.inputs.module }}
     
#       - name: Terraform Init
#         run: terraform init
#         working-directory: modules/${{ github.event.inputs.module }}
       
#       # Conditional Apply steps
#       - name: Terraform Plan (Apply)
#         if: github.event.inputs.action == 'apply'
#         run: terraform plan -out ${{ env.TF_PLAN_FILE }} -var-file="${{ github.event.inputs.module }}.tfvars"
#         working-directory: modules/${{ github.event.inputs.module }}
       
#       # Conditional Destroy steps  
#       - name: Terraform Plan (Destroy)
#         if: github.event.inputs.action == 'destroy'
#         run: terraform plan -destroy -out ${{ env.TF_PLAN_FILE }} -var-file="${{ github.event.inputs.module }}.tfvars"
#         working-directory: modules/${{ github.event.inputs.module }}
       
#       # Apply with approval
#       - name: Terraform Apply
#         if: success()
#         run: terraform apply -auto-approve ${{ env.TF_PLAN_FILE }}
#         working-directory: modules/${{ github.event.inputs.module }}

